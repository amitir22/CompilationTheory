%{
/* Declarations section */
    #include <iostream>
    #include <stdlib.h>
    #include "Semantics.h"
    #include "hw3_output.hpp"
    using namespace std;
    extern int yylex();
    extern int yylineno;
    int yyerror(const char * message);
%}

/* Rules section */

%nonassoc VOID;
%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc IF;
%nonassoc ELSE;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left EQ;
%nonassoc REL;
%left PLUS_MINUS;
%left MUL_DIV;
%right NOT;
%nonassoc SWITCH;
%nonassoc CASE;
%nonassoc DEFAULT;
%nonassoc COLON;
%left RBRACE;
%left LBRACE;
%left RPAREN;
%left LPAREN;

%nonassoc SECOND_PRIOR;
%nonassoc FIRST_PRIOR;
%%

Program : {$$ = new Program();} Funcs {exitProgramRuntimeState();};
Funcs : %prec SECOND_PRIOR{$$ = new Funcs();} |
        FuncDecl Funcs %prec FIRST_PRIOR{$$ = new Funcs();};
FuncDecl: RetType ID LPAREN Formals RPAREN {$$ = new FuncDecl(dynamic_cast<RetType*>($1),$2,dynamic_cast<Formals*>($4));} LBRACE OpenScope {insertFunctionParametersToSymbolTable(dynamic_cast<Formals*>($4));} Statements CloseScope {exitProgramFuncs(dynamic_cast<RetType*>($1));} RBRACE {$$ = $6;};
RetType: Type{$$ = new RetType(dynamic_cast<Type*>($1));} | VOID{$$ = new RetType($1);};
Formals : {$$ = new Formals();} | FormalsList{$$ = new Formals(dynamic_cast<FormalsList*>($1));};
FormalsList : FormalDecl{$$ = new FormalsList(dynamic_cast<FormalDecl*>($1));} |
              FormalDecl COMMA FormalsList{$$ = new FormalsList(dynamic_cast<FormalDecl*>($1), dynamic_cast<FormalsList*>($3));};
FormalDecl : Type ID{$$ = new FormalDecl(dynamic_cast<Type*>($1), $2);};
Statements : Statement{$$ = new Statements(dynamic_cast<Statement*>($1));};
Statements : Statements Statement{$$ = new Statements(dynamic_cast<Statements*>($1), dynamic_cast<Statement*>($2));};
Statement : LBRACE OpenScope Statements CloseScope RBRACE {$$ = new Statement(dynamic_cast<Statements*>($3));};
Statement : Type ID SC{$$ = new Statement(dynamic_cast<Type*>($1),$2);};
Statement : Type ID ASSIGN Exp SC{$$ = new Statement(dynamic_cast<Type*>($1),$2, dynamic_cast<Exp*>($4));};
Statement : ID ASSIGN Exp SC{$$ = new Statement($1, dynamic_cast<Exp*>($3));};
Statement : Call SC{$$ = new Statement(dynamic_cast<Call*>($1));};
Statement : RETURN SC{$$ = new Statement("VOID");};
Statement : RETURN Exp SC{$$ = new Statement(dynamic_cast<Exp*>($2));};
Statement : IF LPAREN SPECIAL_EXP_PARSE RPAREN OpenScope M Statement %prec IF {$$ = new Statement("if", dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($7));closeScope();backpatchIf(dynamic_cast<M*>($6), dynamic_cast<Exp*>($3));};
Statement : IF LPAREN SPECIAL_EXP_PARSE RPAREN OpenScope M Statement ELSE {$$ = new Statement("if else", dynamic_cast<Exp*>($3), dynamic_cast<Statement*>($7));closeScope();} OpenScope N Statement CloseScope {backpatchIfElse(dynamic_cast<M*>($6),dynamic_cast<N*>($11), dynamic_cast<Exp*>($3));$$ = mergeIfElseLists(dynamic_cast<Statement*>($9),dynamic_cast<Statement*>($12));};
Statement : WHILE LPAREN N Exp RPAREN {$$ = parseBooleanCondition(dynamic_cast<Exp*>($4));} {$$ = new Statement("while", dynamic_cast<Exp*>($4));enterLoop();} OpenScope Statement CloseScope{exitLoop(dynamic_cast<N*>($3),dynamic_cast<P*>($6),dynamic_cast<Statement*>($9)), $$ = $7;};
Statement : BREAK SC{$$ = new Statement($1);};
Statement : CONTINUE SC{$$ = new Statement($1);};
Statement : SWITCH {enterSwitchState();} LPAREN Exp {new Exp(dynamic_cast<Exp*>($4), "switch");} RPAREN LBRACE OpenScope CaseList {$$ = new Statement(dynamic_cast<Exp*>($4),dynamic_cast<CaseList*>($9));} CloseScope {exitSwitchState();} RBRACE {$$ = $10;};
Call : ID LPAREN ExpList RPAREN{$$ = new Call($1, dynamic_cast<ExpList*>($3));};
Call : ID LPAREN RPAREN{$$ = new Call($1);};
ExpList : Exp{$$ = new ExpList(dynamic_cast<Exp*>($1));};
ExpList : Exp COMMA ExpList{$$ = new ExpList(dynamic_cast<Exp*>($1), dynamic_cast<ExpList*>($3));};
Type : INT{$$ = new Type($1);};
Type : BYTE{$$ = new Type($1);};
Type : BOOL{$$ = new Type($1);};
Exp : LPAREN Exp RPAREN{$$ = new Exp(dynamic_cast<Exp*>($2));};
Exp : Exp PLUS_MINUS Exp{$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "PLUS_MINUS");};
Exp : Exp MUL_DIV Exp{$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "MUL_DIV");};
Exp : ID{$$ = new Exp($1);};
Exp : Call{$$ = new Exp(dynamic_cast<Call*>($1));};
Exp : NUM{$$ = new Exp($1, "NUM");};
Exp : NUM B{$$ = new Exp($1, "BYTE");};
Exp : STRING{$$ = new Exp($1, "STRING");};
Exp : TRUE{$$ = new Exp($1, "BOOL");};
Exp : FALSE{$$ = new Exp($1, "BOOL");};
Exp : NOT Exp{$$ = new Exp($1, dynamic_cast<Exp*>($2));};
Exp : Exp AND {$$ = parseBooleanCondition(dynamic_cast<Exp*>($1));} Exp{$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($4), "AND", dynamic_cast<P*>($3));};
Exp : Exp OR {$$ = parseBooleanCondition(dynamic_cast<Exp*>($1));} Exp{$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($4), "OR", dynamic_cast<P*>($3));};
Exp : Exp EQ Exp{$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "EQ_NEQ_RELOP");};
Exp : Exp REL Exp{$$ = new Exp(dynamic_cast<Exp*>($1),$2,dynamic_cast<Exp*>($3), "REL_RELOP");};
CaseList : CaseDecl CaseList{$$ = new CaseList(dynamic_cast<CaseDecl*>($1),dynamic_cast<CaseList*>($2));};
CaseList : CaseDecl{$$ = new CaseList(dynamic_cast<CaseDecl*>($1));};
CaseList : DEFAULT COLON N Statements{$$ = new CaseList(dynamic_cast<Statements*>($4), dynamic_cast<N*>($3));};
CaseDecl : CASE CaseOpener NUM COLON Statements{$$ = new CaseDecl(new Exp($3, "CASE_NUM"), dynamic_cast<Statements*>($5), dynamic_cast<Variable*>($2));};
OpenScope : {openScope();};
CloseScope : {closeScope();};
SPECIAL_EXP_PARSE : Exp {$$ = new Exp(dynamic_cast<Exp*>($1), "STRING");};
M : {$$ = new M();};
N : {$$ = new N();};
CaseOpener : {$$ = new Variable("OpenCase");}

%%

/* Code section */

int main() {
    return yyparse();
}

int yyerror(const char * message) {
    output::errorSyn(yylineno);
    exit(0);
}